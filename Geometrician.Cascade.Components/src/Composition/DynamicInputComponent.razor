@inherits DynamicInputComponentBase

@if (Input.Type == typeof(int))
{
  <MudNumericField
    Label="@Input.Label"
    HelperText="@Input.HelperText"
    HideSpinButtons="true"
    @bind-Value="ValueAsInteger"
    Validation="@(new Func<int, IEnumerable<string>>(ValidateAs))"/>
}
else if (Input.Type == typeof(double))
{
  <MudNumericField
    Label="@Input.Label"
    HelperText="@Input.HelperText"
    HideSpinButtons="true"
    @bind-Value="ValueAsDouble"
    Validation="@(new Func<double, IEnumerable<string>>(ValidateAs))"/>
}
else if (Input.Type == typeof(string))
{
  <MudTextField
    Label="@Input.Label"
    HelperText="@Input.HelperText"
    @bind-Value="ValueAsString"
    Validation="@(new Func<string, IEnumerable<string>>(ValidateAs))"/>
}
else if (typeof(Enum).IsAssignableFrom(Input.Type))
{
  <MudSelect
    Label="@Input.Label"
    HelperText="@Input.HelperText"
    @bind-Value="ValueAsEnum"
    Validation="@(new Func<Enum, IEnumerable<string>>(ValidateAs))">
    @foreach (Enum item in Enum.GetValues(Input.Type))
    {
      <MudSelectItem Value="@item">@item</MudSelectItem>
    }
  </MudSelect>
}
else if (Input.Type == typeof(bool))
{
  <MudSwitch
    Label="@Input.Label"
    @bind-Checked="@ValueAsBoolean"/>
}
else
{
  <MudField
    Label="@Input.Label"
    HelperText="@Input.HelperText">
    @ValueAsObject
  </MudField>
}
